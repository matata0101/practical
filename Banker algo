Banker algorithm.

#include <iostream> using namespace std; int main()

{

int n, m;

n = 5;	// Number of processesm = 3;	// Number of resources int alloc[5][3] = {{0, 1, 0}, // Allocation Matrix

{2, 0, 0},

{3, 0, 2},

{2, 1, 1},

{0, 0, 2}};

int max[5][3] = {{7, 5, 3}, // MAX Matrix

{3, 2, 2},

{9, 0, 2},

{2, 2, 2},

{4, 3, 3}};

int avail[3] = {3, 3, 2}; // Available Resources

int f[n], ans[n], ind = 0; // f[n] decides whether process is visoted or not for (int k = 0; k < n; k++)

f[k] = 0;	// making all flags=0 initially int need[n][m]; // making need matrix

for (int i = 0; i < n; i++)

{

for (int j = 0; j < m; j++)

need[i][j] = max[i][j] - alloc[i][j];

}

for (int k = 0; k < n; k++)

{

for (int i = 0; i < n; i++)

{

if (f[i] == 0)

{

// means process is not visited int flag = 0;

for (int j = 0; j < m; j++)

{

if (need[i][j] > avail[j])

{		// not enough resources flag = 1; // check for next process break;

}

}

pgm

if (flag == 0)

{		// means we have enough resources ans[ind++] = i; // store index serial wise of pgm execution for (int y = 0; y < m; y++)

avail[y] += alloc[i][y]; // take resources fromm executed

f[i] = 1;	// marking process is considered

}

}

}

}

int flag = 1;

// To check if sequence is safe or not for (int i = 0; i < n; i++)

{

if (f[i] == 0)

{

flag = 0;

cout << "The given sequence is not safe"; break;

}

}

if (flag == 1)

{

cout << "Following is the SAFE Sequence" << endl; for (int i = 0; i < n - 1; i++)

cout << " P" << ans[i] << " ->"; cout << " P" << ans[n - 1] << endl;

}

}
